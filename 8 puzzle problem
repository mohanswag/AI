import heapq

class PuzzleState:
    def __init__(self, board, parent=None, move='', depth=0, cost=0):
        self.board = board
        self.parent = parent
        self.move = move
        self.depth = depth
        self.cost = cost
        self.zero_position = self.board.index(0)

    def __lt__(self, other):
        return (self.cost + self.depth) < (other.cost + other.depth)

    def is_goal(self):
        return self.board == [1, 2, 3, 4, 5, 6, 7, 8, 0]

    def get_neighbors(self):
        neighbors = []
        x, y = self.zero_position // 3, self.zero_position % 3
        directions = {
            'U': (x - 1, y),
            'D': (x + 1, y),
            'L': (x, y - 1),
            'R': (x, y + 1)
        }

        for move, (nx, ny) in directions.items():
            if 0 <= nx < 3 and 0 <= ny < 3:
                neighbor_position = nx * 3 + ny
                new_board = self.board[:]
                new_board[self.zero_position], new_board[neighbor_position] = new_board[neighbor_position], new_board[self.zero_position]
                neighbors.append(PuzzleState(new_board, self, move, self.depth + 1, self.heuristic(new_board)))

        return neighbors

    def heuristic(self, state):
        return sum(abs((val - 1) // 3 - i // 3) + abs((val - 1) % 3 - i % 3)
                   for i, val in enumerate(state) if val != 0)

    def path(self):
        state, moves = self, []
        while state:
            moves.append(state.move)
            state = state.parent
        return moves[::-1][1:]

def a_star_search(start):
    open_list = []
    heapq.heappush(open_list, start)
    closed_set = set()

    while open_list:
        current_state = heapq.heappop(open_list)

        if current_state.is_goal():
            return current_state.path()

        closed_set.add(tuple(current_state.board))

        for neighbor in current_state.get_neighbors():
            if tuple(neighbor.board) not in closed_set:
                heapq.heappush(open_list, neighbor)

    return None

def solve_8_puzzle(initial_board):
    initial_state = PuzzleState(initial_board)
    solution = a_star_search(initial_state)
    return solution

if __name__ == '__main__':
    initial_board = [1, 2, 3, 4, 0, 5, 6, 7, 8]
    solution = solve_8_puzzle(initial_board)
    if solution:
        print("Solution found!")
        print("Moves:", ' '.join(solution))
    else:
        print("No solution exists for the given initial state.")
