def is_safe(board, row, col):
    """
    Check if it's safe to place a queen at board[row][col].
    This is done by checking the column and the two diagonals.
    """
    for i in range(row):
        if board[i] == col or \
           board[i] - i == col - row or \
           board[i] + i == col + row:
            return False
    return True

def solve_n_queens_util(board, row, n, solutions):
    """
    Utilizes backtracking to place queens on the board.
    """
    if row == n:
        solutions.append(board[:])
        return
    
    for col in range(n):
        if is_safe(board, row, col):
            board[row] = col
            solve_n_queens_util(board, row + 1, n, solutions)
            board[row] = -1  # Reset row (backtrack)

def solve_n_queens(n):
    """
    Solves the N-Queens problem and returns all possible solutions.
    Each solution is represented by a list of integers where the index
    represents the row, and the value at that index represents the column
    where the queen is placed.
    """
    board = [-1] * n
    solutions = []
    solve_n_queens_util(board, 0, n, solutions)
    return solutions

def print_solutions(solutions, n):
    """
    Prints all solutions in a readable format.
    """
    for sol in solutions:
        for i in range(n):
            row = ['.'] * n
            row[sol[i]] = 'Q'
            print(' '.join(row))
        print("\n" + "-" * (2 * n - 1) + "\n")

if __name__ == '__main__':
    n = 8
    solutions = solve_n_queens(n)
    print(f"Total solutions for {n}-Queens problem: {len(solutions)}\n")
    print_solutions(solutions, n)
