import heapq

class Node:
    def __init__(self, position, parent=None):
        self.position = position
        self.parent = parent
        self.g = 0  # Cost from start to current node
        self.h = 0  # Heuristic from current node to goal
        self.f = 0  # Total cost

    def __eq__(self, other):
        return self.position == other.position

    def __lt__(self, other):
        return self.f < other.f

def heuristic(current, goal):
    # Using Manhattan distance as the heuristic
    return abs(current[0] - goal[0]) + abs(current[1] - goal[1])

def a_star_algorithm(start, goal, grid):
    open_list = []
    closed_list = set()

    start_node = Node(start)
    goal_node = Node(goal)
    
    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)
        closed_list.add(current_node.position)

        if current_node == goal_node:
            path = []
            while current_node:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]  # Return reversed path

        neighbors = [(0, -1), (0, 1), (-1, 0), (1, 0)]  # Up, Down, Left, Right

        for neighbor in neighbors:
            neighbor_position = (current_node.position[0] + neighbor[0], current_node.position[1] + neighbor[1])

            if not (0 <= neighbor_position[0] < len(grid) and 0 <= neighbor_position[1] < len(grid[0])):
                continue  # Out of bounds

            if grid[neighbor_position[0]][neighbor_position[1]] == 1:
                continue  # Obstacle

            neighbor_node = Node(neighbor_position, current_node)

            if neighbor_node.position in closed_list:
                continue

            neighbor_node.g = current_node.g + 1
            neighbor_node.h = heuristic(neighbor_node.position, goal_node.position)
            neighbor_node.f = neighbor_node.g + neighbor_node.h

            if any(open_node for open_node in open_list if neighbor_node == open_node and neighbor_node.g > open_node.g):
                continue

            heapq.heappush(open_list, neighbor_node)

    return None  # No path found

# Example usage
grid = [
    [0, 1, 0, 0, 0],
    [0, 1, 0, 1, 0],
    [0, 0, 0, 1, 0],
    [0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0]
]

start = (0, 0)
goal = (4, 4)
path = a_star_algorithm(start, goal, grid)

if path:
    print("Path found:", path)
else:
    print("No path found")
