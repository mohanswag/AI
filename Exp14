import math

def print_board(board):
    print(" " + board[0] + " | " + board[1] + " | " + board[2])
    print("-----------")
    print(" " + board[3] + " | " + board[4] + " | " + board[5])
    print("-----------")
    print(" " + board[6] + " | " + board[7] + " | " + board[8])

def check_winner(board, player):
    win_conditions = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8], # rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8], # columns
        [0, 4, 8], [2, 4, 6]             # diagonals
    ]
    for condition in win_conditions:
        if board[condition[0]] == board[condition[1]] == board[condition[2]] == player:
            return True
    return False

def check_draw(board):
    return all(cell != " " for cell in board)

def alpha_beta(board, depth, alpha, beta, is_maximizing):
    if check_winner(board, "O"):
        return 10 - depth
    if check_winner(board, "X"):
        return depth - 10
    if check_draw(board):
        return 0
    
    if is_maximizing:
        best_score = -math.inf
        for i in range(9):
            if board[i] == " ":
                board[i] = "O"
                score = alpha_beta(board, depth + 1, alpha, beta, False)
                board[i] = " "
                best_score = max(score, best_score)
                alpha = max(alpha, best_score)
                if beta <= alpha:
                    break
        return best_score
    else:
        best_score = math.inf
        for i in range(9):
            if board[i] == " ":
                board[i] = "X"
                score = alpha_beta(board, depth + 1, alpha, beta, True)
                board[i] = " "
                best_score = min(score, best_score)
                beta = min(beta, best_score)
                if beta <= alpha:
                    break
        return best_score

def best_move(board):
    move = -1
    best_score = -math.inf
    alpha = -math.inf
    beta = math.inf
    for i in range(9):
        if board[i] == " ":
            board[i] = "O"
            score = alpha_beta(board, 0, alpha, beta, False)
            board[i] = " "
            if score > best_score:
                best_score = score
                move = i
    return move

def tic_tac_toe():
    board = [" " for _ in range(9)]
    current_player = "X"  # Player starts the game
    
    while True:
        print_board(board)
        
        if current_player == "X":
            print("Player X, enter your move (1-9): ")
            move = int(input()) - 1
            if board[move] != " ":
                print("Invalid move, try again.")
                continue
            board[move] = "X"
        else:
            move = best_move(board)
            board[move] = "O"
            print(f"Player O (Computer) chooses position {move + 1}")
        
        if check_winner(board, "O"):
            print_board(board)
            print("Player O wins!")
            break
        if check_winner(board, "X"):
            print_board(board)
            print("Player X wins!")
            break
        if check_draw(board):
            print_board(board)
            print("It's a draw!")
            break
        
        current_player = "O" if current_player == "X" else "X"

if __name__ == "__main__":
    tic_tac_toe()
