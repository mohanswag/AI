from collections import deque
from math import gcd

class WaterJugSolver:
    def __init__(self, capacity1, capacity2, target):
        self.capacity1 = capacity1
        self.capacity2 = capacity2
        self.target = target
        self.visited = set()

    def is_solvable(self):
        """ 
        Determine if the problem is solvable. 
        The target must be less than or equal to the maximum capacity of the jugs 
        and must be a multiple of the GCD of the jug capacities.
        """
        return self.target <= max(self.capacity1, self.capacity2) and \
               self.target % gcd(self.capacity1, self.capacity2) == 0

    def bfs(self):
        """ 
        Use Breadth-First Search to find the shortest sequence of operations 
        to measure exactly the target amount of water.
        """
        queue = deque()
        queue.append((0, 0, []))  # Start with both jugs empty

        while queue:
            jug1, jug2, path = queue.popleft()

            # Check if we reached the target in either of the jugs
            if jug1 == self.target or jug2 == self.target:
                return path + [(jug1, jug2)]

            if (jug1, jug2) in self.visited:
                continue

            self.visited.add((jug1, jug2))

            # Generate possible next states

            # Fill Jug 1
            if jug1 < self.capacity1:
                queue.append((self.capacity1, jug2, path + [(self.capacity1, jug2)]))

            # Fill Jug 2
            if jug2 < self.capacity2:
                queue.append((jug1, self.capacity2, path + [(jug1, self.capacity2)]))

            # Empty Jug 1
            if jug1 > 0:
                queue.append((0, jug2, path + [(0, jug2)]))

            # Empty Jug 2
            if jug2 > 0:
                queue.append((jug1, 0, path + [(jug1, 0)]))

            # Pour Jug 1 to Jug 2
            pour_to_jug2 = min(jug1, self.capacity2 - jug2)
            if pour_to_jug2 > 0:
                queue.append((jug1 - pour_to_jug2, jug2 + pour_to_jug2, path + [(jug1 - pour_to_jug2, jug2 + pour_to_jug2)]))

            # Pour Jug 2 to Jug 1
            pour_to_jug1 = min(jug2, self.capacity1 - jug1)
            if pour_to_jug1 > 0:
                queue.append((jug1 + pour_to_jug1, jug2 - pour_to_jug1, path + [(jug1 + pour_to_jug1, jug2 - pour_to_jug1)]))

        return None

    def solve(self):
        """ 
        Solve the water jug problem and print the steps if a solution exists.
        """
        if not self.is_solvable():
            return "No solution exists for the given jug capacities and target amount."

        solution = self.bfs()
        if solution:
            return f"Solution found with {len(solution) - 1} steps:\n" + \
                   "\n".join(f"Jug1: {s[0]} liters, Jug2: {s[1]} liters" for s in solution)
        else:
            return "No solution exists."

if __name__ == '__main__':
    # Define the jug capacities and target amount
    jug1_capacity = 4
    jug2_capacity = 3
    target_amount = 2

    solver = WaterJugSolver(jug1_capacity, jug2_capacity, target_amount)
    print(solver.solve())
